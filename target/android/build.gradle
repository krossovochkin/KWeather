apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply from: "$rootDir/quality/lint.gradle"

android {
    compileSdkVersion v.compile_sdk_version
    buildToolsVersion v.build_tools_version

    defaultConfig {
        applicationId "com.krossovochkin.kweather"
        minSdkVersion v.min_sdk_version
        targetSdkVersion v.target_sdk_version
        versionCode v.version_code
        versionName v.version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("$rootDir/release-keystore-kweather.jks")
            storePassword System.getenv()['RELEASE_STORE_PASSWORD']
            keyAlias System.getenv()['RELEASE_KEY_ALIAS']
            keyPassword System.getenv()['RELEASE_KEY_PASSWORD']
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            buildConfigField("String", "API_KEY", "${getApiKey()}")
            buildConfigField("String", "MAPBOX_API_KEY", "${getMapboxApiKey()}")
        }
        release {
            signingConfig signingConfigs.release
            buildConfigField("String", "API_KEY", "${getApiKey()}")
            buildConfigField("String", "MAPBOX_API_KEY", "${getMapboxApiKey()}")

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion v.androidx_compose
    }

    packagingOptions {
        exclude "META-INF/ktor-client-serialization.kotlin_module"
        exclude "META-INF/ktor-client-json.kotlin_module"
        exclude "META-INF/ktor-client-core.kotlin_module"
        exclude "META-INF/ktor-io.kotlin_module"
        exclude "META-INF/ktor-http.kotlin_module"
        exclude "META-INF/ktor-http-cio.kotlin_module"
        exclude "META-INF/ktor-utils.kotlin_module"
        exclude "META-INF/kotlinx-serialization-runtime.kotlin_module"
    }
}

dependencies {
    implementation d.kotlin_coroutines_core
    implementation d.kotlin_coroutines_android

    implementation d.project.shared
    implementation d.project.core_image_loader_android

    implementation d.kodein

    implementation d.androidx_core_ktx
    implementation d.androidx_appcompat
    implementation d.androidx_compose_foundation
    implementation d.androidx_compose_material
    implementation d.androidx_compose_material_icons
    implementation d.androidx_compose_navigation
    implementation d.androidx_compose_ui_tooling
    implementation d.androidx_compose_ui_util
    implementation d.material_components
    implementation d.accompanist_pager
    implementation d.accompanist_pager_indicators
    implementation d.accompanist_insets
    implementation d.accompanist_insets_ui
    implementation d.accompanist_system_ui_controller
}

String getApiKey() {
    def ciKey = System.getenv()['API_KEY']
    def localKey = findProperty("kweather_api_key")
    if (ciKey != null) {
        return ciKey
    } else if (localKey != null) {
        return localKey
    } else {
        throw Exception("Can't find API key")
    }
}

String getMapboxApiKey() {
    def ciKey = System.getenv()['MAPBOX_API_KEY']
    def localKey = findProperty("kweather_mapbox_api_key")
    if (ciKey != null) {
        return ciKey
    } else if (localKey != null) {
        return localKey
    } else {
        throw Exception("Can't find API key")
    }
}
