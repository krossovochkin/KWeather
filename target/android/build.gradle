apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply from: "$rootDir/quality/lint.gradle"

android {
    namespace 'com.krossovochkin.kweather'

    compileSdk libs.versions.android.compile.sdk.get().toInteger()

    defaultConfig {
        applicationId "com.krossovochkin.kweather"
        minSdk libs.versions.android.min.sdk.get().toInteger()
        targetSdk libs.versions.android.target.sdk.get().toInteger()
        versionCode libs.versions.app.version.code.get().toInteger()
        versionName libs.versions.app.version.name.get()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("$rootDir/release-keystore-kweather.jks")
            storePassword System.getenv()['RELEASE_STORE_PASSWORD']
            keyAlias System.getenv()['RELEASE_KEY_ALIAS']
            keyPassword System.getenv()['RELEASE_KEY_PASSWORD']
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            buildConfigField("String", "API_KEY", "${getApiKey()}")
            buildConfigField("String", "MAPBOX_API_KEY", "${getMapboxApiKey()}")
        }
        release {
            signingConfig signingConfigs.release
            buildConfigField("String", "API_KEY", "${getApiKey()}")
            buildConfigField("String", "MAPBOX_API_KEY", "${getMapboxApiKey()}")

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.androidx.compose.compiler.get()
    }

    packagingOptions {
        exclude "META-INF/ktor-client-serialization.kotlin_module"
        exclude "META-INF/ktor-client-json.kotlin_module"
        exclude "META-INF/ktor-client-core.kotlin_module"
        exclude "META-INF/ktor-io.kotlin_module"
        exclude "META-INF/ktor-http.kotlin_module"
        exclude "META-INF/ktor-http-cio.kotlin_module"
        exclude "META-INF/ktor-utils.kotlin_module"
        exclude "META-INF/kotlinx-serialization-runtime.kotlin_module"
    }
}

dependencies {
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android

    implementation project(":shared")
    implementation project(":core:image-loader:android")

    implementation libs.kodein.di

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.androidx.compose.foundation
    implementation libs.androidx.compose.material
    implementation libs.androidx.compose.material.icons.extended
    implementation libs.androidx.compose.navigation
    implementation libs.androidx.compose.ui.tooling
    implementation libs.androidx.compose.ui.util
    implementation libs.android.material
    implementation libs.accompanist.pager
    implementation libs.accompanist.pager.indicators
    implementation libs.accompanist.insets.ui
    implementation libs.accompanist.systemuicontroller
}

String getApiKey() {
    def ciKey = System.getenv()['API_KEY']
    def localKey = findProperty("kweather_api_key")
    if (ciKey != null) {
        return ciKey
    } else if (localKey != null) {
        return localKey
    } else {
        throw Exception("Can't find API key")
    }
}

String getMapboxApiKey() {
    def ciKey = System.getenv()['MAPBOX_API_KEY']
    def localKey = findProperty("kweather_mapbox_api_key")
    if (ciKey != null) {
        return ciKey
    } else if (localKey != null) {
        return localKey
    } else {
        throw Exception("Can't find API key")
    }
}
